#!/usr/bin/env bash

trap on_int INT

on_int() {
  echo "trapped sigint: exiting with status 2" 1>&2
  exit 2
}

package=codebuildsh

while test $# -gt 0; do
        case "$1" in
                -h|--help)
                        echo "$package - attempt to capture frames"
                        echo " "
                        echo "$package [options] application [arguments]"
                        echo " "
                        echo "options:"
                        echo "-h, --help                                     show brief help"
                        echo "--vpc=VPC_ID                                   specify an VPC in which start the build"
                        echo "--subnets=SUBNET1,SUBNET2,...                  specify subnets in which start the build"
                        echo "--s3-bucket=mybucket                           specify S3 bucket to store the build bundle"
                        echo "--security-groups=SG1,SG2,...                  specify security groups that are associated to the builder container"
                        echo "--service-role=myiamrolename                   specify the iam role used by CodeBuild"
                        echo "--image=alpine:3.7                             specify the container image used by CodeBuild builds"
                        echo "--environment=[{name=str,value=str,type=str}]  specify environment variables used by CodeBuild"
                        exit 0
                        ;;
                -a)
                        shift
                        if test $# -gt 0; then
                                export PROCESS=$1
                        else
                                echo "no process specified"
                                exit 1
                        fi
                        shift
                        ;;
                --vpc*)
                        export vpcid=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                --subnets*)
                        export subnets=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                --s3-bucket*)
                        export s3bucket=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                --security-groups*)
                        export sgids=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                --service-role*)
                        export iamrole=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                --image*)
                        export image=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                --environment*)
                        export environment=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                *)
                        if [ "$script" != "" ]; then
                          v=$1
                          len=${#v}
                          if [ $len -gt 10 ]; then
                            v="${v:0:10}..."
                          fi
                          echo error: wrong number of arguments: you provided the second and extra argument "\"$v\"" 1>&2
                          exit 1
                        fi
                        script="$1"
                        shift
                        ;;
        esac
done

if [ -z "$script" ]; then
  echo error: missing script to run. run it like \`codebuildsh \"echo hello\"\` 1>&2
  exit 1
fi

set -vx

name=${name:-myproject}
desc=${desc:-variant}
s3bucket=${s3bucket:-mybucket}
location=${location:-$s3bucket/variant/test.zip}
# Requires the policy described in https://docs.aws.amazon.com/codebuild/latest/userguide/auth-and-access-control-iam-identity-based-access-control.html#customer-managed-policies-example-create-vpc-network-interface
iamrole=${iamrole:-CodeBuildServiceRole}
vpcid=${vpcid:-myvcpid}
# Requires NAT gateway and corresponding route table to access the internet
subnets=${subnets:-subnet-12345678}
sgids=${sgids:-sg-12345678}
image=${image:-alpine:3.7}
environment=${environment:-[]}
vpcconfig=vpcId=$vpcid,subnets=$subnets,securityGroupIds=$sgids

projects=$(aws codebuild batch-get-projects --names $name)

num_projects=$(jq '.projects | length' <(echo "$projects"))

if [ "$num_projects" -gt 0 ]; then
  #jq '.projects[0]' <(echo "$projects") > project.json
  aws codebuild update-project \
    --name $name \
    --description "$desc" \
    --source type=S3,location=$location \
    --service-role $iamrole \
    --vpc-config $vpcconfig \
    --artifacts type=NO_ARTIFACTS \
    --environment type=LINUX_CONTAINER,image=${image},computeType=BUILD_GENERAL1_SMALL,environmentVariables=${environment} | tee create-project.json 1>&2
  jq .project create-project.json > project.json
else
  # See the official doc for the details of the params: https://docs.aws.amazon.com/codebuild/latest/userguide/run-build.html#run-build-cli
  aws codebuild create-project \
    --name $name \
    --description "$desc" \
    --source type=S3,location=$location \
    --service-role $iamrole \
    --vpc-config $vpcconfig \
    --artifacts type=NO_ARTIFACTS \
    --environment type=LINUX_CONTAINER,image=${image},computeType=BUILD_GENERAL1_SMALL,environmentVariables=${environment} | tee create-project.json 1>&2
  jq .project create-project.json > project.json
fi

# create the source archive

mkdir -p codebuildwork
rm -rf codebuildwork/*

# stdbuf is necessary. otherwise you get stdout/stderr mixed in the stdout captured by variant
# See https://superuser.com/a/770612 for more details on the stdbuf usage
cat <<EOF > codebuildwork/buildspec.yml
version: 0.2
env:
  variables:
    build_version: "0.1" 
phases:
  build:
    commands:
    - stdbuf -i 0 -o 0 -e 0 ./build.sh
EOF

cat <<EOF > codebuildwork/build.sh
#!/usr/bin/env bash

exec 3>&2 2> >(sed 's/^/variant.stderr: /' 1>&3)

EOF
echo "$script" | while read LINE || [ -n "${LINE}" ]; do
  echo "$LINE" >> codebuildwork/build.sh
done
chmod +x codebuildwork/build.sh

pushd codebuildwork 1>&2
if [ -f test.zip ]; then
  rm test.zip
fi
zip -r ../test.zip * 1>&2
popd 1>&2

aws s3 cp test.zip s3://$location 1>&2

if ! aws s3 cp test.zip s3://$location 1>&2; then
  echo "failed to upload the build source archive. perhaps you're missing aws api connectivity?" 1>&2
  exit 1
fi

aws codebuild start-build --project-name $(cat project.json | jq -r .name) > start-build.json

build_id=$(jq -r .build.id start-build.json)

build_in_progress() {
  aws codebuild batch-get-builds --ids $build_id > batch-get-builds.json
  jq '.builds[0]' batch-get-builds.json > build.json
  phase=$(jq -r .currentPhase build.json)
  [ "$phase" != "COMPLETED" ]
}

if hash tac 2>/dev/null; then
  reverse=tac
else
  reverse='tail -r'
fi

build_status() {
  aws codebuild batch-get-builds --ids $build_id > batch-get-builds.json
  jq '.builds[0]' batch-get-builds.json > build.json
  phase=$(jq -r .currentPhase build.json)
  log_group_name=$(jq -r .logs.groupName build.json)
  log_stream_name=$(jq -r .logs.streamName build.json)
  jq -r .buildStatus build.json 1>&2
  jq .phases build.json 1>&2
  aws logs get-log-events --log-group-name $log_group_name --log-stream-name $log_stream_name > log-events.json
  jq -jr '.events[] | select(true) | .message' log-events.json | sed -n '/Running command/,$p' | sed '1d' | $reverse | sed -n '/Phase complete: BUILD/,$p' | sed '1d' | $reverse
}

while build_in_progress; do
  sleep 5
done

build_status
